// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Error.proto
package com.github.jg513.example.error;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;
import lombok.Getter;
import lombok.Setter;
import lombok.experimental.Accessors;

@Getter
@Setter
@Accessors(chain = true)
public final class ErrorMessage extends Message<ErrorMessage, ErrorMessage.Builder> {

    public static final ProtoAdapter<ErrorMessage> ADAPTER = new ProtoAdapter_ErrorMessage();

    private static final long serialVersionUID = 0L;

    public static final ErrorCode DEFAULT_CODE = ErrorCode.OK;

    public static final String DEFAULT_MESSAGE = "";

    @WireField(
            tag = 1,
            adapter = "com.github.jg513.example.error.ErrorCode#ADAPTER",
            label = WireField.Label.REQUIRED)
    private ErrorCode code;

    @WireField(tag = 2, adapter = "com.squareup.wire.ProtoAdapter#STRING")
    private String message;

    public ErrorMessage(ErrorCode code, String message) {
        this(code, message, ByteString.EMPTY);
    }

    public ErrorMessage(ErrorCode code, String message, ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.code = code;
        this.message = message;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.code = code;
        builder.message = message;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof ErrorMessage)) return false;
        ErrorMessage o = (ErrorMessage) other;
        return unknownFields().equals(o.unknownFields())
                && code.equals(o.code)
                && Internal.equals(message, o.message);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + code.hashCode();
            result = result * 37 + (message != null ? message.hashCode() : 0);
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append(", code=").append(code);
        if (message != null) builder.append(", message=").append(message);
        return builder.replace(0, 2, "ErrorMessage{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<ErrorMessage, Builder> {

        public ErrorCode code;

        public String message;

        public Builder() {}

        public Builder code(ErrorCode code) {
            this.code = code;
            return this;
        }

        public Builder message(String message) {
            this.message = message;
            return this;
        }

        @Override
        public ErrorMessage build() {
            if (code == null) {
                throw Internal.missingRequiredFields(code, "code");
            }
            return new ErrorMessage(code, message, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_ErrorMessage extends ProtoAdapter<ErrorMessage> {

        public ProtoAdapter_ErrorMessage() {
            super(FieldEncoding.LENGTH_DELIMITED, ErrorMessage.class);
        }

        @Override
        public int encodedSize(ErrorMessage value) {
            return ErrorCode.ADAPTER.encodedSizeWithTag(1, value.code)
                    + ProtoAdapter.STRING.encodedSizeWithTag(2, value.message)
                    + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, ErrorMessage value) throws IOException {
            ErrorCode.ADAPTER.encodeWithTag(writer, 1, value.code);
            ProtoAdapter.STRING.encodeWithTag(writer, 2, value.message);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public ErrorMessage decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        {
                            try {
                                builder.code(ErrorCode.ADAPTER.decode(reader));
                            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
                                builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
                            }
                            break;
                        }
                    case 2:
                        builder.message(ProtoAdapter.STRING.decode(reader));
                        break;
                    default:
                        {
                            reader.readUnknownField(tag);
                        }
                }
            }
            builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
            return builder.build();
        }

        @Override
        public ErrorMessage redact(ErrorMessage value) {
            Builder builder = value.newBuilder();
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
