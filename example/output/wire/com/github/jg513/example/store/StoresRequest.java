// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Store.proto
package com.github.jg513.example.store;

import com.github.jg513.example.resource.PageablePb;
import com.github.jg513.webpb.options.FieldOptions;
import com.github.jg513.webpb.options.MessageOptions;
import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.Arrays;
import okio.ByteString;
import javax.validation.constraints.NotNull;
import lombok.Getter;
import lombok.Setter;
import lombok.experimental.Accessors;
import org.hibernate.validator.constraints.Range;

@Getter
@Setter
@Accessors(chain = true)
public final class StoresRequest extends Message<StoresRequest, StoresRequest.Builder> {

    public static final ProtoAdapter<StoresRequest> ADAPTER = new ProtoAdapter_StoresRequest();

    private static final long serialVersionUID = 0L;

    public static final MessageOptions MESSAGE_OPTIONS =
            new MessageOptions.Builder()
                    .method("POST")
                    .path("/stores/{type}?page={pageable.page}&size={pageable.size}")
                    .build();

    public static final FieldOptions FIELD_OPTIONS_PAGEABLE =
            new FieldOptions.Builder().omitted(true).build();

    public static final FieldOptions FIELD_OPTIONS_TYPE =
            new FieldOptions.Builder().omitted(true).build();

    public static final FieldOptions FIELD_OPTIONS_CITY =
            new FieldOptions.Builder()
                    .javaAnnotations(
                            Arrays.asList(
                                    "@NotNull(message = \"City is required\")", "@Range(min = 0)"))
                    .build();

    public static final Integer DEFAULT_TYPE = 0;

    public static final Integer DEFAULT_CITY = 0;

    @WireField(
            tag = 1,
            adapter = "com.github.jg513.example.resource.PageablePb#ADAPTER",
            label = WireField.Label.REQUIRED)
    private PageablePb pageable;

    @WireField(
            tag = 2,
            adapter = "com.squareup.wire.ProtoAdapter#INT32",
            label = WireField.Label.REQUIRED)
    private Integer type;

    @WireField(
            tag = 3,
            adapter = "com.squareup.wire.ProtoAdapter#INT32",
            label = WireField.Label.REQUIRED)
    @NotNull(message = "City is required")
    @Range(min = 0)
    private Integer city;

    public StoresRequest() {
        super(ADAPTER, ByteString.EMPTY);
    }

    public StoresRequest(PageablePb pageable, Integer type, Integer city) {
        this(pageable, type, city, ByteString.EMPTY);
    }

    public StoresRequest(
            PageablePb pageable, Integer type, Integer city, ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.pageable = pageable;
        this.type = type;
        this.city = city;
    }

    public MessageOptions MESSAGE_OPTIONS() {
        return MESSAGE_OPTIONS;
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.pageable = pageable;
        builder.type = type;
        builder.city = city;
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof StoresRequest)) return false;
        StoresRequest o = (StoresRequest) other;
        return unknownFields().equals(o.unknownFields())
                && pageable.equals(o.pageable)
                && type.equals(o.type)
                && city.equals(o.city);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
            result = unknownFields().hashCode();
            result = result * 37 + pageable.hashCode();
            result = result * 37 + type.hashCode();
            result = result * 37 + city.hashCode();
            super.hashCode = result;
        }
        return result;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append(", pageable=").append(pageable);
        builder.append(", type=").append(type);
        builder.append(", city=").append(city);
        return builder.replace(0, 2, "StoresRequest{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<StoresRequest, Builder> {

        public PageablePb pageable;

        public Integer type;

        public Integer city;

        public Builder() {}

        public Builder pageable(PageablePb pageable) {
            this.pageable = pageable;
            return this;
        }

        public Builder type(Integer type) {
            this.type = type;
            return this;
        }

        public Builder city(Integer city) {
            this.city = city;
            return this;
        }

        @Override
        public StoresRequest build() {
            if (pageable == null || type == null || city == null) {
                throw Internal.missingRequiredFields(
                        pageable, "pageable", type, "type", city, "city");
            }
            return new StoresRequest(pageable, type, city, super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_StoresRequest extends ProtoAdapter<StoresRequest> {

        public ProtoAdapter_StoresRequest() {
            super(FieldEncoding.LENGTH_DELIMITED, StoresRequest.class);
        }

        @Override
        public int encodedSize(StoresRequest value) {
            return PageablePb.ADAPTER.encodedSizeWithTag(1, value.pageable)
                    + ProtoAdapter.INT32.encodedSizeWithTag(2, value.type)
                    + ProtoAdapter.INT32.encodedSizeWithTag(3, value.city)
                    + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, StoresRequest value) throws IOException {
            PageablePb.ADAPTER.encodeWithTag(writer, 1, value.pageable);
            ProtoAdapter.INT32.encodeWithTag(writer, 2, value.type);
            ProtoAdapter.INT32.encodeWithTag(writer, 3, value.city);
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public StoresRequest decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    case 1:
                        builder.pageable(PageablePb.ADAPTER.decode(reader));
                        break;
                    case 2:
                        builder.type(ProtoAdapter.INT32.decode(reader));
                        break;
                    case 3:
                        builder.city(ProtoAdapter.INT32.decode(reader));
                        break;
                    default:
                        {
                            reader.readUnknownField(tag);
                        }
                }
            }
            builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
            return builder.build();
        }

        @Override
        public StoresRequest redact(StoresRequest value) {
            Builder builder = value.newBuilder();
            builder.pageable = PageablePb.ADAPTER.redact(builder.pageable);
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
