// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Store.proto
package com.github.jg513.example.store;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;
import lombok.Getter;
import lombok.Setter;
import lombok.experimental.Accessors;

@Getter
@Setter
@Accessors(chain = true)
public final class Project extends Message<Project, Project.Builder> {

    public static final ProtoAdapter<Project> ADAPTER = new ProtoAdapter_Project();

    private static final long serialVersionUID = 0L;

    public Project() {
        this(ByteString.EMPTY);
    }

    public Project(ByteString unknownFields) {
        super(ADAPTER, unknownFields);
    }

    @Override
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.addUnknownFields(unknownFields());
        return builder;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof Project)) return false;
        Project o = (Project) other;
        return unknownFields().equals(o.unknownFields());
    }

    @Override
    public int hashCode() {
        return unknownFields().hashCode();
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        return builder.replace(0, 2, "Project{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<Project, Builder> {

        public Builder() {}

        @Override
        public Project build() {
            return new Project(super.buildUnknownFields());
        }
    }

    private static final class ProtoAdapter_Project extends ProtoAdapter<Project> {

        public ProtoAdapter_Project() {
            super(FieldEncoding.LENGTH_DELIMITED, Project.class);
        }

        @Override
        public int encodedSize(Project value) {
            return value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, Project value) throws IOException {
            writer.writeBytes(value.unknownFields());
        }

        @Override
        public Project decode(ProtoReader reader) throws IOException {
            Builder builder = new Builder();
            long token = reader.beginMessage();
            for (int tag; (tag = reader.nextTag()) != -1; ) {
                switch (tag) {
                    default:
                        {
                            reader.readUnknownField(tag);
                        }
                }
            }
            builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
            return builder.build();
        }

        @Override
        public Project redact(Project value) {
            Builder builder = value.newBuilder();
            builder.clearUnknownFields();
            return builder.build();
        }
    }
}
