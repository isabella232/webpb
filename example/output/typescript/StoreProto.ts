// Code generated by Webpb compiler, do not edit.
// https://github.com/jg513/webpb

import { Webpb } from 'Webpb';

import { ResourceProto } from './ResourceProto';

export namespace StoreProto {
    export interface IStorePb {
        id: number;
        name: string;
        city: number;
    }

    export class StorePb implements IStorePb {
        id!: number;
        name!: string;
        city!: number;
        META: () => Webpb.WebpbMeta;

        private constructor(p: IStorePb) {
            Webpb.assign(p, this, []);
            this.META = () => ({
                class: 'StorePb',
                method: '',
                path: ''
            });
        }

        static create(properties: IStorePb): StorePb {
            return new StorePb(properties);
        }
    }

    export interface IStoreRequest {
        id: number;
    }

    export class StoreRequest implements IStoreRequest, Webpb.WebpbMessage {
        id!: number;
        META: () => Webpb.WebpbMeta;

        private constructor(p: IStoreRequest) {
            Webpb.assign(p, this, ["id"]);
            this.META = () => ({
                class: 'StoreRequest',
                method: 'GET',
                path: `/stores/${p.id}`
            });
        }

        static create(properties: IStoreRequest): StoreRequest {
            return new StoreRequest(properties);
        }
    }

    export interface IStoreResponse {
        store: StoreProto.IStorePb;
    }

    export class StoreResponse implements IStoreResponse {
        store!: StoreProto.IStorePb;
        META: () => Webpb.WebpbMeta;

        private constructor(p: IStoreResponse) {
            Webpb.assign(p, this, []);
            this.META = () => ({
                class: 'StoreResponse',
                method: '',
                path: ''
            });
        }

        static create(properties: IStoreResponse): StoreResponse {
            return new StoreResponse(properties);
        }
    }

    export interface IStoresRequest {
        pageable: ResourceProto.IPageablePb;
        type: number;
        city?: number;
    }

    export class StoresRequest implements IStoresRequest, Webpb.WebpbMessage {
        pageable!: ResourceProto.IPageablePb;
        type!: number;
        city?: number;
        META: () => Webpb.WebpbMeta;

        private constructor(p: IStoresRequest) {
            Webpb.assign(p, this, ["pageable", "type"]);
            this.META = () => ({
                class: 'StoresRequest',
                method: 'POST',
                path: `/stores/${p.type}${Webpb.query({
                    page: Webpb.getter(p, 'paging.page'),
                    size: Webpb.getter(p, 'paging.size'),
                })}`
            });
        }

        static create(properties: IStoresRequest): StoresRequest {
            return new StoresRequest(properties);
        }
    }

    export interface IStoresResponse {
        stores: StoreProto.IStorePb;
        paging: ResourceProto.IPagingPb;
    }

    export class StoresResponse implements IStoresResponse {
        stores!: StoreProto.IStorePb;
        paging!: ResourceProto.IPagingPb;
        META: () => Webpb.WebpbMeta;

        private constructor(p: IStoresResponse) {
            Webpb.assign(p, this, []);
            this.META = () => ({
                class: 'StoresResponse',
                method: '',
                path: ''
            });
        }

        static create(properties: IStoresResponse): StoresResponse {
            return new StoresResponse(properties);
        }
    }
}
